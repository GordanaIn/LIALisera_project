stages:
  - test
  - build
  - deploy

maven-test:
  image: maven:3-jdk-11
  stage: test
  script: "mvn test package"
  artifacts:
    paths:
      - target/*.jar

build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
#test_variable:
#  stage: test
#  script:
#    - echo "$SSH_PRIVATE_KEY"

deploy:
  image: docker:latest
  stage: deploy
  before_script:

    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    #      - apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh

    #     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    #     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/LiaBanken.pem
    #      - chmod 700  ~/.ssh
    #      - chmod 700 ~/.ssh/id_rsa
    #      - chmod 400 ~/.ssh/vm_id_rsa.pub
    #     - chmod 600 ~/.ssh/LiaBanken.pem
    - chmod 700 ~/.ssh/LiaBanken.pem
    - ssh-add ~/.ssh/LiaBanken.pem


  #      - ssh-keyscan -H 13.48.138.83 >> ~/.ssh/known_hosts
  #     - ssh-keyscan 13-48-138-83 >> /.ssh/LiaBanken.pem
  #      - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    #     - ssh-keygen -f ~/.ssh/LiaBanken.pem -p
    #     - ssh -i "~/.ssh/LiaBanken.pem" -o StrictHostKeyChecking=no ubuntu@13.48.138.83 " sudo docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY; sudo docker pull $CI_REGISTRY_IMAGE$; sudo docker-compose up -d"
    - ssh -i "~/.ssh/LiaBanken.pem" -o StrictHostKeyChecking=no ubuntu@ec2-18-222-92-242.us-east-2.compute.amazonaws.com "  sudo docker pull $CI_REGISTRY_IMAGE; sudo docker-compose up -d"
    # - ssh -i "~/.ssh/LiaBanken.pem"  ubuntu@13.48.138.83 " sudo docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY; sudo docker pull $CI_REGISTRY_IMAGE; sudo docker-compose up -d"
  #    - ssh -i "~/.ssh/LiaBanken.pem" -o StrictHostKeyChecking=no ubuntu@ec2-13-48-138-83.eu-north-1.compute.amazonaws.com " sudo docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY; sudo docker pull $CI_REGISTRY_IMAGE; sudo docker-compose up -d"
  #    - echo $CI_REGISTRY_PASSWORD > docker_password
  #    - scp docker_password ubuntu@13.48.138.83:~/tmp/docker_password
  #    - ssh ubuntu@13.48.138.83  " cat ~/tmp/docker_password | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY; sudo docker pull $CI_REGISTRY_IMAGE; sudo docker-compose up -d"
  #after_script:
  #  - sudo docker logout
  #only:
  #   - main
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
